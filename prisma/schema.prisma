// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model categories {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100) @unique
  news_list news_list[]
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model news_list {
  id Int @id @default(autoincrement())
  title String @db.VarChar(100)
  short_des String @db.VarChar(400)
  img1 String @db.VarChar(300)
  img2 String @db.VarChar(300)
  img3 String @db.VarChar(300)
  img4 String @db.VarChar(300)
  keywords String @db.VarChar(300)
  long_des String @db.LongText
  type String @db.VarChar(200)
  catId Int
  comments comment[]
  categories categories @relation(fields: [catId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model user {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  email String @db.VarChar(50) @unique
  mobile String @db.VarChar(50) 
  password String @db.VarChar(50) 
  otp String @db.VarChar(50) 
  comments comment[]
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model comment {
  id Int @id @default(autoincrement())
  userId Int
  postId Int
  user user @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  news_list news_list @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model socials {
  id Int @id @default(autoincrement())
  facebook String @db.VarChar(200)
  youtube String @db.VarChar(200)
  twitter String @db.VarChar(200)
  linkedin String @db.VarChar(200)
  about String @db.Text
  address String @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model subscribe {
  id Int @id @default(autoincrement())
  email String @db.VarChar(200) @unique
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model policies {
  id Int @id @default(autoincrement())
  long_des String @db.LongText
  type String @db.VarChar(50)
}